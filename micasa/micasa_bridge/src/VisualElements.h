//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `VisualElements.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __VisualElements_h__
#define __VisualElements_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Person.h>
#include <Camera360RGB.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompVisualElements
{

class VisualElements;
class VisualElementsPrx;

}

namespace RoboCompVisualElements
{

struct TRoi
{
    int xcenter;
    int ycenter;
    int xsize;
    int ysize;
    int finalxsize;
    int finalysize;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(xcenter, ycenter, xsize, ysize, finalxsize, finalysize);
    }
};

using TMetrics = ::std::vector<float>;

struct TObject
{
    int id;
    int type;
    int left;
    int top;
    int right;
    int bot;
    float score;
    float depth;
    float x;
    float y;
    float z;
    float vx;
    float vy;
    float vz;
    float vrx;
    float vry;
    float vrz;
    ::RoboCompVisualElements::TMetrics metrics;
    ::RoboCompCamera360RGB::TImage image;
    ::RoboCompPerson::TPerson person;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const ::RoboCompVisualElements::TMetrics&, const ::RoboCompCamera360RGB::TImage&, const ::RoboCompPerson::TPerson&> ice_tuple() const
    {
        return std::tie(id, type, left, top, right, bot, score, depth, x, y, z, vx, vy, vz, vrx, vry, vrz, metrics, image, person);
    }
};

using TObjectList = ::std::vector<TObject>;

struct TObjects
{
    ::RoboCompVisualElements::TObjectList objects;
    long long int timestampimage;
    long long int timestampgenerated;
    float period;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompVisualElements::TObjectList&, const long long int&, const long long int&, const float&> ice_tuple() const
    {
        return std::tie(objects, timestampimage, timestampgenerated, period);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompVisualElements
{

class VisualElements : public virtual ::Ice::Object
{
public:

    using ProxyType = VisualElementsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TObjects getVisualObjects(TObjects objects, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setVisualObjects(TObjects objects, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompVisualElements
{

class VisualElementsPrx : public virtual ::Ice::Proxy<VisualElementsPrx, ::Ice::ObjectPrx>
{
public:

    TObjects getVisualObjects(const TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompVisualElements::TObjects>(true, this, &VisualElementsPrx::_iceI_getVisualObjects, objects, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getVisualObjectsAsync(const TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompVisualElements::TObjects>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompVisualElements::TObjects, P>(false, this, &VisualElementsPrx::_iceI_getVisualObjects, objects, context);
    }

    ::std::function<void()>
    getVisualObjectsAsync(const TObjects& objects,
                          ::std::function<void(::RoboCompVisualElements::TObjects)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompVisualElements::TObjects>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompVisualElements::VisualElementsPrx::_iceI_getVisualObjects, objects, context);
    }

    /// \cond INTERNAL
    void _iceI_getVisualObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompVisualElements::TObjects>>&, const TObjects&, const ::Ice::Context&);
    /// \endcond

    void setVisualObjects(const TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VisualElementsPrx::_iceI_setVisualObjects, objects, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setVisualObjectsAsync(const TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VisualElementsPrx::_iceI_setVisualObjects, objects, context);
    }

    ::std::function<void()>
    setVisualObjectsAsync(const TObjects& objects,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompVisualElements::VisualElementsPrx::_iceI_setVisualObjects, objects, context);
    }

    /// \cond INTERNAL
    void _iceI_setVisualObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TObjects&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    VisualElementsPrx() = default;
    friend ::std::shared_ptr<VisualElementsPrx> IceInternal::createProxy<VisualElementsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompVisualElements::TRoi>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompVisualElements::TRoi, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TRoi& v)
    {
        istr->readAll(v.xcenter, v.ycenter, v.xsize, v.ysize, v.finalxsize, v.finalysize);
    }
};

template<>
struct StreamableTraits<::RoboCompVisualElements::TObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 148;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompVisualElements::TObject, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TObject& v)
    {
        istr->readAll(v.id, v.type, v.left, v.top, v.right, v.bot, v.score, v.depth, v.x, v.y, v.z, v.vx, v.vy, v.vz, v.vrx, v.vry, v.vrz, v.metrics, v.image, v.person);
    }
};

template<>
struct StreamableTraits<::RoboCompVisualElements::TObjects>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompVisualElements::TObjects, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TObjects& v)
    {
        istr->readAll(v.objects, v.timestampimage, v.timestampgenerated, v.period);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompVisualElements
{

using VisualElementsPtr = ::std::shared_ptr<VisualElements>;
using VisualElementsPrxPtr = ::std::shared_ptr<VisualElementsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompVisualElements
{

class VisualElements;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< VisualElements>&);
::IceProxy::Ice::Object* upCast(VisualElements*);
/// \endcond

}

}

namespace RoboCompVisualElements
{

class VisualElements;
/// \cond INTERNAL
::Ice::Object* upCast(VisualElements*);
/// \endcond
typedef ::IceInternal::Handle< VisualElements> VisualElementsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompVisualElements::VisualElements> VisualElementsPrx;
typedef VisualElementsPrx VisualElementsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(VisualElementsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompVisualElements
{

struct TRoi
{
    ::Ice::Int xcenter;
    ::Ice::Int ycenter;
    ::Ice::Int xsize;
    ::Ice::Int ysize;
    ::Ice::Int finalxsize;
    ::Ice::Int finalysize;

    bool operator==(const TRoi& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(xcenter != rhs_.xcenter)
        {
            return false;
        }
        if(ycenter != rhs_.ycenter)
        {
            return false;
        }
        if(xsize != rhs_.xsize)
        {
            return false;
        }
        if(ysize != rhs_.ysize)
        {
            return false;
        }
        if(finalxsize != rhs_.finalxsize)
        {
            return false;
        }
        if(finalysize != rhs_.finalysize)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TRoi& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(xcenter < rhs_.xcenter)
        {
            return true;
        }
        else if(rhs_.xcenter < xcenter)
        {
            return false;
        }
        if(ycenter < rhs_.ycenter)
        {
            return true;
        }
        else if(rhs_.ycenter < ycenter)
        {
            return false;
        }
        if(xsize < rhs_.xsize)
        {
            return true;
        }
        else if(rhs_.xsize < xsize)
        {
            return false;
        }
        if(ysize < rhs_.ysize)
        {
            return true;
        }
        else if(rhs_.ysize < ysize)
        {
            return false;
        }
        if(finalxsize < rhs_.finalxsize)
        {
            return true;
        }
        else if(rhs_.finalxsize < finalxsize)
        {
            return false;
        }
        if(finalysize < rhs_.finalysize)
        {
            return true;
        }
        else if(rhs_.finalysize < finalysize)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TRoi& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TRoi& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TRoi& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TRoi& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::Ice::Float> TMetrics;

struct TObject
{
    ::Ice::Int id;
    ::Ice::Int type;
    ::Ice::Int left;
    ::Ice::Int top;
    ::Ice::Int right;
    ::Ice::Int bot;
    ::Ice::Float score;
    ::Ice::Float depth;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float vx;
    ::Ice::Float vy;
    ::Ice::Float vz;
    ::Ice::Float vrx;
    ::Ice::Float vry;
    ::Ice::Float vrz;
    ::RoboCompVisualElements::TMetrics metrics;
    ::RoboCompCamera360RGB::TImage image;
    ::RoboCompPerson::TPerson person;
};

typedef ::std::vector<TObject> TObjectList;

struct TObjects
{
    ::RoboCompVisualElements::TObjectList objects;
    ::Ice::Long timestampimage;
    ::Ice::Long timestampgenerated;
    ::Ice::Float period;
};

}

namespace RoboCompVisualElements
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_getVisualObjects.
 */
class Callback_VisualElements_getVisualObjects_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VisualElements_getVisualObjects_Base> Callback_VisualElements_getVisualObjectsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_setVisualObjects.
 */
class Callback_VisualElements_setVisualObjects_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VisualElements_setVisualObjects_Base> Callback_VisualElements_setVisualObjectsPtr;

}

namespace IceProxy
{

namespace RoboCompVisualElements
{

class VisualElements : public virtual ::Ice::Proxy<VisualElements, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompVisualElements::TObjects getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getVisualObjects(_iceI_begin_getVisualObjects(objects, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getVisualObjects(objects, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getVisualObjects(objects, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getVisualObjects(objects, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::RoboCompVisualElements::Callback_VisualElements_getVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getVisualObjects(objects, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context, const ::RoboCompVisualElements::Callback_VisualElements_getVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getVisualObjects(objects, context, cb, cookie);
    }

    ::RoboCompVisualElements::TObjects end_getVisualObjects(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getVisualObjects(const ::RoboCompVisualElements::TObjects&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setVisualObjects(_iceI_begin_setVisualObjects(objects, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setVisualObjects(objects, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(objects, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(objects, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::RoboCompVisualElements::Callback_VisualElements_setVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(objects, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElements::TObjects& objects, const ::Ice::Context& context, const ::RoboCompVisualElements::Callback_VisualElements_setVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(objects, context, cb, cookie);
    }

    void end_setVisualObjects(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setVisualObjects(const ::RoboCompVisualElements::TObjects&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompVisualElements
{

class VisualElements : public virtual ::Ice::Object
{
public:

    typedef VisualElementsPrx ProxyType;
    typedef VisualElementsPtr PointerType;

    virtual ~VisualElements();

#ifdef ICE_CPP11_COMPILER
    VisualElements() = default;
    VisualElements(const VisualElements&) = default;
    VisualElements& operator=(const VisualElements&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TObjects getVisualObjects(const TObjects& objects, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setVisualObjects(const TObjects& objects, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const VisualElements& lhs, const VisualElements& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const VisualElements& lhs, const VisualElements& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompVisualElements::TRoi>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompVisualElements::TRoi, S>
{
    static void write(S* ostr, const ::RoboCompVisualElements::TRoi& v)
    {
        ostr->write(v.xcenter);
        ostr->write(v.ycenter);
        ostr->write(v.xsize);
        ostr->write(v.ysize);
        ostr->write(v.finalxsize);
        ostr->write(v.finalysize);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVisualElements::TRoi, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TRoi& v)
    {
        istr->read(v.xcenter);
        istr->read(v.ycenter);
        istr->read(v.xsize);
        istr->read(v.ysize);
        istr->read(v.finalxsize);
        istr->read(v.finalysize);
    }
};

template<>
struct StreamableTraits< ::RoboCompVisualElements::TObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 148;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompVisualElements::TObject, S>
{
    static void write(S* ostr, const ::RoboCompVisualElements::TObject& v)
    {
        ostr->write(v.id);
        ostr->write(v.type);
        ostr->write(v.left);
        ostr->write(v.top);
        ostr->write(v.right);
        ostr->write(v.bot);
        ostr->write(v.score);
        ostr->write(v.depth);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.vx);
        ostr->write(v.vy);
        ostr->write(v.vz);
        ostr->write(v.vrx);
        ostr->write(v.vry);
        ostr->write(v.vrz);
        ostr->write(v.metrics);
        ostr->write(v.image);
        ostr->write(v.person);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVisualElements::TObject, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TObject& v)
    {
        istr->read(v.id);
        istr->read(v.type);
        istr->read(v.left);
        istr->read(v.top);
        istr->read(v.right);
        istr->read(v.bot);
        istr->read(v.score);
        istr->read(v.depth);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.vx);
        istr->read(v.vy);
        istr->read(v.vz);
        istr->read(v.vrx);
        istr->read(v.vry);
        istr->read(v.vrz);
        istr->read(v.metrics);
        istr->read(v.image);
        istr->read(v.person);
    }
};

template<>
struct StreamableTraits< ::RoboCompVisualElements::TObjects>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompVisualElements::TObjects, S>
{
    static void write(S* ostr, const ::RoboCompVisualElements::TObjects& v)
    {
        ostr->write(v.objects);
        ostr->write(v.timestampimage);
        ostr->write(v.timestampgenerated);
        ostr->write(v.period);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVisualElements::TObjects, S>
{
    static void read(S* istr, ::RoboCompVisualElements::TObjects& v)
    {
        istr->read(v.objects);
        istr->read(v.timestampimage);
        istr->read(v.timestampgenerated);
        istr->read(v.period);
    }
};

}
/// \endcond

namespace RoboCompVisualElements
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_getVisualObjects.
 */
template<class T>
class CallbackNC_VisualElements_getVisualObjects : public Callback_VisualElements_getVisualObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TObjects&);

    CallbackNC_VisualElements_getVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualElementsPrx proxy = VisualElementsPrx::uncheckedCast(result->getProxy());
        TObjects ret;
        try
        {
            ret = proxy->end_getVisualObjects(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 */
template<class T> Callback_VisualElements_getVisualObjectsPtr
newCallback_VisualElements_getVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const TObjects&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_getVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 */
template<class T> Callback_VisualElements_getVisualObjectsPtr
newCallback_VisualElements_getVisualObjects(T* instance, void (T::*cb)(const TObjects&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_getVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_getVisualObjects.
 */
template<class T, typename CT>
class Callback_VisualElements_getVisualObjects : public Callback_VisualElements_getVisualObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TObjects&, const CT&);

    Callback_VisualElements_getVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualElementsPrx proxy = VisualElementsPrx::uncheckedCast(result->getProxy());
        TObjects ret;
        try
        {
            ret = proxy->end_getVisualObjects(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_getVisualObjectsPtr
newCallback_VisualElements_getVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const TObjects&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_getVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_getVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_getVisualObjectsPtr
newCallback_VisualElements_getVisualObjects(T* instance, void (T::*cb)(const TObjects&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_getVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_setVisualObjects.
 */
template<class T>
class CallbackNC_VisualElements_setVisualObjects : public Callback_VisualElements_setVisualObjects_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VisualElements_setVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_setVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_setVisualObjects<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_setVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElements_setVisualObjects<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElements::newCallback_VisualElements_setVisualObjects.
 */
template<class T, typename CT>
class Callback_VisualElements_setVisualObjects : public Callback_VisualElements_setVisualObjects_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VisualElements_setVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_setVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_setVisualObjects<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_setVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElements::VisualElements::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElements_setVisualObjectsPtr
newCallback_VisualElements_setVisualObjects(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElements_setVisualObjects<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
